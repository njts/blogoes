[{"content":"Posts. I usually have to do a lot of research when working on web development and cybersecurity tasks. Sometimes I find the information I\u0026rsquo;m looking for in the comments section of a website or on a personal blog, which saves me a lot of time. That\u0026rsquo;s why I just openly share my own experiences, code snippets, and some notes here. I believe that some of the information I share will benefit someone and make their job easier. I don\u0026rsquo;t put ads, paywalls, or other forms of monetization on my content. I don\u0026rsquo;t create long, meaningless SEO content. I just post what I know, what I did to accomplish a certain thing, and what I\u0026rsquo;m thinking about something.\nTech Stack In this blog, I use Hugo open-source static site generator and self-hosted Plausible Analytics.\nWhy Hugo? I love Hugo because it\u0026rsquo;s fast, easy to use, and less bloated. I\u0026rsquo;ve used a variety of CMSs in the past, including WordPress, Joomla, and Ghost, but when I met Hugo, I fell in love with it. Hugo may be the most underappreciated CMS. Hugo makes it extremely simple to make the entire website\u0026rsquo;s code open source because there is no database or backend. This is exactly what I\u0026rsquo;m looking for. In addition, I take a lot of markdown notes. With Hugo, I can easily post them without modifying them. It\u0026rsquo;s is the best match for my requirements.\nWhy Plausible Analytics? Simply because I value my visitors\u0026rsquo; privacy and dislike Google Analytics and other similar services that collect a lot of information about visitors. I don\u0026rsquo;t need 95% of the data Google Analytics collect. I don\u0026rsquo;t care what model of smartphone my visitor is using, how old they are, what gender they are, and so on. I\u0026rsquo;m just curious about how many people read my articles. Knowing this encourages me to create more content. That\u0026rsquo;s all. This is why I use Plausible Analytics. Plausible doesn\u0026rsquo;t collect user IP, persistent identifiers, cross-site or cross-device tracking data, or any other kind of information I mentioned above. It simply functions as a page view and visitor counter. On my own VPS, I run my own Plausible Analytics instance. If that VPS is hacked, the hacker will be unable to extract any useful information about my visitors. All information is like \u0026ldquo;this article has been read X times\u0026rdquo;, \u0026ldquo;that many visitors come from that country\u0026rdquo;, and so on. There are no personal identifiers, etc.\nTo display the total number of visitors on my homepage, I use my custom-made express API TVAP (Total Visitors API for Plausible).\nThis is my current tech stack. If I change the tech stack of this blog in the future, I\u0026rsquo;ll update this article.\n","permalink":"https://ntmv.net/posts/about-this-website-content-and-tech-stack/","summary":"Posts. I usually have to do a lot of research when working on web development and cybersecurity tasks. Sometimes I find the information I\u0026rsquo;m looking for in the comments section of a website or on a personal blog, which saves me a lot of time. That\u0026rsquo;s why I just openly share my own experiences, code snippets, and some notes here. I believe that some of the information I share will benefit someone and make their job easier.","title":"About This Website's Content And Tech Stack"},{"content":"What is Miniflux? Miniflux is my favorite RSS reader. I enjoy using it. Recently, I attempted to install the latest miniflux reader without Docker and encountered some difficulties. Installation with Docker is straightforward, but it may be necessary to install without Docker in some cases. When I looked for resources to help me solve the problems I encountered during the installation, I found no proper online installation guide. As a result, I decided to create one. So here is it. Easy, simple Miniflux installation guide\nBefore start installing the app, update the host sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Add the miniflux repo echo \u0026#34;deb [trusted=yes] https://repo.miniflux.app/apt/ /\u0026#34; | sudo tee /etc/apt/sources.list.d/miniflux.list \u0026gt; /dev/null sudo apt update Install miniflux and other necessary components sudo apt install miniflux postgresql libpq5 postgresql postgresql-client postgresql-client-common postgresql-contrib Create a database for miniflux sudo -u postgres psql create database miniflux; create user miniflux with encrypted password \u0026#39;miniflux\u0026#39;; grant all privileges on database miniflux to miniflux; alter user miniflux with superuser; \\q Edit miniflux config nano /etc/miniflux.conf # /etc/miniflux.conf RUN_MIGRATIONS=1 DATABASE_URL=user=miniflux password=miniflux dbname=miniflux sslmode=disable LISTEN_ADDR=/run/miniflux/miniflux.sock SQL migration and adding an admin user\nminiflux -c /etc/miniflux.conf -migrate \u0026amp;\u0026amp; miniflux -c /etc/miniflux.conf -create-admin Run the app miniflux -c /etc/miniflux.conf Press Crtl+Z to go back\nInstall nginx and certbot sudo apt update sudo apt install nginx certbot python3-certbot-nginx -y sudo nano /etc/nginx/sites-available/miniflux Nginx config must be like this # Change miniflux.example.com with your domain server { server_name miniflux.example.com; listen 80; location / { proxy_pass http://unix:/run/miniflux/miniflux.sock; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } Enable the config sudo ln -s ../sites-available/miniflux /etc/nginx/sites-enabled/miniflux sudo certbot --non-interactive --redirect --agree-tos --nginx -d miniflux.example.com -m me@example.com Configure systemd service sudo nano /etc/systemd/system/miniflux.service [Unit] Description=Miniflux After=syslog.target network.target [Service] Type=simple User=miniflux ExecStart=/usr/bin/miniflux -c /etc/miniflux.conf Restart=always RestartSec=10 [Install] WantedBy=multi-user.target Reload the Systemd daemon\nsudo systemctl daemon-reload Start the service and enable to start on host boot\nsudo systemctl start miniflux \u0026amp;\u0026amp; sudo systemctl enable miniflux Check the service status\nsudo systemctl status miniflux Ta-Da!! Your miniflux instance is ready! ","permalink":"https://ntmv.net/posts/proper-way-to-install-miniflux/","summary":"What is Miniflux? Miniflux is my favorite RSS reader. I enjoy using it. Recently, I attempted to install the latest miniflux reader without Docker and encountered some difficulties. Installation with Docker is straightforward, but it may be necessary to install without Docker in some cases. When I looked for resources to help me solve the problems I encountered during the installation, I found no proper online installation guide. As a result, I decided to create one.","title":"Proper Way To Install Miniflux RSS Reader on Ubuntu 22"},{"content":"What is gaganode? GaGaNode is a Decentralized Residential IP + Bandwidth Marketplace. With Web3.0 technology, it aims to alleviate the global shortage of IPv4 addresses. Users can participate in the Web3 network at home using Idle Electronics even if they do not have a public network IP address. Future technologies that require home bandwidth for development can obtain real home bandwidth resources via GaGa Node.\nWhat are the advantages of running GaGaNodes? To earn GaGaNode Credits, you simply need an idle Android phone, as well as a tvbox, Raspberry Pi, computer, or other electrical equipment. Users do not need to invest in additional mining machines; instead, they simply donate their home broadband resources to earn GaGaNode Credits.\nLet\u0026rsquo;s start Before you start, you need to register HERE and create a GaGaNode account. https://out.nijatoes.com/GaGaNode-register Runnig GaGaNode on Android phone Download and Install GaGaNode android app Copy your token Start android app and enter your token Enable Auto-starting Set \u0026lsquo;No restrictions\u0026rsquo; when start. Enable Autostart. Runnig GaGaNode on Windows PC Open PowerShell in Windows Use the “Run” window to open PowerShell You can open Windows PowerShell with administrator privileges from Run. A quick way to launch this window is to press the Win + R keys on the keyboard. Then, type powershell and press Enter or click OK. Switch from PowerShell to PowerShell Admin. If you’re already working in PowerShell but you need to switch over to admin mode, you can do so without closing PowerShell. Just run this command:\nstart-process powershell -verb runas 1.Download \u0026amp; Install wget -Uri \u0026#34;https://assets.coreservice.io/public/package/20/app/1.0.3/app-1_0_3.tar.gz\u0026#34; -OutFile \u0026#34;app-windows-amd64.tar.gz\u0026#34; ; tar -zxf app-windows-amd64.tar.gz ; rm -Force app-windows-amd64.tar.gz ; cd ./app-windows-amd64 ; ./app.exe service install 2.Start Service ./app.exe service start 3.Set Token ./apps/gaganode/gaganode.exe config set --token=your_token_here 4.Restart APP ./app.exe restart 5.Check APP Status ./app.exe status After 1-3 minutes, you will have a new terminal record at terminals open in new node. Runnig GaGaNode on Linux VPS and Desktops Install Dependencies Packages sudo apt-get update -y \u0026amp;\u0026amp; sudo apt-get -y install curl tar ca-certificates 1.Download \u0026amp; Install curl -o app-linux-amd64.tar.gz https://assets.coreservice.io/public/package/22/app/1.0.3/app-1_0_3.tar.gz \u0026amp;\u0026amp; tar -zxf app-linux-amd64.tar.gz \u0026amp;\u0026amp; rm -f app-linux-amd64.tar.gz \u0026amp;\u0026amp; cd ./app-linux-amd64 \u0026amp;\u0026amp; sudo ./app service install 2.Start Service sudo ./app service start 3.Check APP Status ./app status console output:\nmeson@meson-server:~/app-linux-amd64$ ./app status [gaganode]:\tlocal version:[1.0.3] latest version:[1.0.3] status:[DOWNLOADED]\n4.Set Token sudo ./apps/gaganode/gaganode config set --token=your_token_here 5.Restart APP ./app restart Terminal Recording Notice: This article is a summary of the official documentation. I strongly recommend looking through the official documentation for more in-depth information and installation instructions\n","permalink":"https://ntmv.net/posts/what-is-gaganode-and-how-to-run-in-on-mobile/","summary":"What is gaganode? GaGaNode is a Decentralized Residential IP + Bandwidth Marketplace. With Web3.0 technology, it aims to alleviate the global shortage of IPv4 addresses. Users can participate in the Web3 network at home using Idle Electronics even if they do not have a public network IP address. Future technologies that require home bandwidth for development can obtain real home bandwidth resources via GaGa Node.\nWhat are the advantages of running GaGaNodes?","title":"What is GaGaNode And How To Run It On Mobile, Windows pc, Linux Servers (Summarized)"},{"content":"What is Meson Guru? Meson.Guru is a semi-automatic news aggregator for Meson Network. You can find all the latest news, tweets, and videos about Meson Network in one place. We do not republish or store any material on our server. We simply provide a link to the relevant content.\nBacked When the idea of creating such a website came to me, I decided to build my own little CMS with node.js. After writing the first hundred lines of code, I realized it wouldn\u0026rsquo;t be as simple as I thought and decided to use one of the popular CMSs. I chose Wordpess because it provides numerous options and flexibility. But there was a problem. I don\u0026rsquo;t like PHP. it\u0026rsquo;s slow and outdated. You understand what I mean. Meanwhile, I decided to deliver this site to the end user without any PHP runtime. Clean and fresh.. 👌\nHow it works WordPress 6.0 is installed on the internal network of my super private server. I\u0026rsquo;m still building the website with Wordpress. I set up a few cron jobs with a five-minute interval loop. First cron job is for Simply Static plugin and GitHub pushes. Simply Static plugin generates a new static version of the wordpess generated website every five minutes and saves it to my super secret server\u0026rsquo;s /static directory. Following that, the second github push code runs and uploads that static files to my Github repo, sends a telegram notification, chekcs the server state etc. That is all. Our website is now static.\nAuto static website build, github push and telegram notification #!/bin/bash start=`date +%s.%N` cpuload=$(top -bn1 | grep load | awk \u0026#39;{printf \u0026#34;%.2f%%\\t\\t\\n\u0026#34;, $(NF-2)}\u0026#39;) ramload=$(free -m | awk \u0026#39;NR==2{printf \u0026#34;%.2f%%\\t\\t\u0026#34;, $3*100/$2}\u0026#39;) # Build static website cd /var/www/html wp cron event schedule simply_static_site_export_cron --allow-root wp cron event run --due-now --allow-root cd /var/www/static status=$(git diff --name-only) # Time stamp builddate() { date +\u0026#34;%Y/%m/%d %H:%M:%S\u0026#34; } end=`date +%s.%N` buildtime=$( echo \u0026#34;$end - $start\u0026#34; | bc -l ) echo \u0026#34;$(builddate) buildTime ${buildtime} cpuLoad: ${cpuload} ramLoad: ${ramload}\u0026#34; \u0026gt;\u0026gt; logs.txt sed -e \u0026#39;s/\\s\\+/,/g\u0026#39; logs.txt \u0026gt; logs.csv # Github push git add . git commit -m \u0026#34;$(builddate) UTC auto commit\u0026#34; git push -u origin main --force # Telegram notification /var/www/private-sripts/telegram-notf.sh \u0026#34; |--------------changes-----------| ${status} | |---------------system------------| | build time ${buildtime} | cpu load: ${cpuload} | ram load: ${ramload} | |------------build date----------| | $(builddate) |--------------------------------------| \u0026#34; /var/www/static/custom-scripts/mem-check.sh responsetime=$(curl -H \u0026#39;Cache-Control: no-cache, no-store\u0026#39; -s -w \u0026#39;\\nLookup time:\\t%{time_namelookup}\\nConnect time:\\t%{time_connect}\\nPreXfer time:\\t%{time_pretransfer}\\nStartXfer time:\\t%{time_starttransfer}\\n\\nTotal time:\\t%{time_total}\\n\u0026#39; -o /dev/null \u0026#34;https://meson.guru/?$(date +%s)\u0026#34;) results=\u0026#34;$(builddate) ${responsetime}\u0026#34; echo ${results} \u0026gt; responsetime.temp Telegram notification handler #!/bin/bash GROUP_ID=\u0026lt;group_id\u0026gt; BOT_TOKEN=\u0026lt;bot_token\u0026gt; # this 3 checks (if) are not necessary but should be convenient if [ \u0026#34;$1\u0026#34; == \u0026#34;-h\u0026#34; ]; then echo \u0026#34;Usage: `basename $0` \\\u0026#34;text message\\\u0026#34;\u0026#34; exit 0 fi if [ -z \u0026#34;$1\u0026#34; ] then echo \u0026#34;Add message text as second arguments\u0026#34; exit 0 fi if [ \u0026#34;$#\u0026#34; -ne 1 ]; then echo \u0026#34;You can pass only one argument. For string with spaces put it on quotes\u0026#34; exit 0 fi curl -s --data \u0026#34;text=$1\u0026#34; --data \u0026#34;chat_id=$GROUP_ID\u0026#34; \u0026#39;https://api.telegram.org/bot\u0026#39;$BOT_TOKEN\u0026#39;/sendMessage\u0026#39; \u0026gt; /dev/null Memory check #!/bin/bash memlimit=50000 # in KB # Reboot if memeory is lower than memory limit mem=$(cat /proc/meminfo | egrep \u0026#34;^MemFree\u0026#34; |awk \u0026#39;{print $2}\u0026#39;) if (( mem \u0026lt;= $memlimit )); then /var/www/private-sripts/telegram-notf.sh \u0026#34;Free memory is $(($mem/1024)) MB and it\u0026#39;s lower than $(($memlimit/1024)) MB limit, so we restart the system\u0026#34; /var/www/static/custom-scripts/reboot.sh else /var/www/private-sripts/telegram-notf.sh \u0026#34;Memory is fine. $(($mem/1024)) MB is free\u0026#34; fi Cron tab @reboot /var/www/static/custom-scripts/cron.sh */5 * * * * tmux send-keys -t 0 \u0026#34;/var/www/static/custom-scripts/auto-git.sh\u0026#34; Enter 0 */4 * * * /var/www/static/custom-scripts/reboot.sh 55 23 * * * /var/www/private-sripts/tg-file.sh Full code is on https://github.com/njts/mesonguru\nPublic hosting. Now we need a hosting to host our static files. Most people will most likely consider Netlify as a solution for this. It\u0026rsquo;s fast and free. However it doesn\u0026rsquo;t fit in this situation. Netlify provides 300 minutes free build time each month. As I mentioned above, we rebuild meson.guru website every 5 minutes, and each rebuild takes about 10 seconds. A quick calculation reveals that we need approximately 1.4k minutes of build time each month. Extra 1000 minutes in Netlify cost about $14 per month.\nThere are few cheap alternatives to host and deploy a static website. CDN store buckets like BunnyCDN, S3 free tier and self-hosted solutions. I like self-hosted solutions because I have more control over them. I chose Coolify to host my website. Coolify is a self-hosted Heroku/Netlify alternative with a ton of great features. It has an auto deploy feature, so whenever my cron job pushes a new version of meson.guru to github, it will deploy the new versions automatically.\nI rented a VPS from Hetzer for $5 per month, installed Coolify on it, and used Coolify to deploy the static version of Meson.guru. It is less expensive than Netlify, and I can run a lot of other applications on the same vps.\nThis was also a fun experience. I learned a lot of new things and shared some of them with you. End of the day, this is my simple solution to serve WordPress websites without PHP runtime.\nThanks for reading.\n","permalink":"https://ntmv.net/posts/wordpress-without-php/","summary":"What is Meson Guru? Meson.Guru is a semi-automatic news aggregator for Meson Network. You can find all the latest news, tweets, and videos about Meson Network in one place. We do not republish or store any material on our server. We simply provide a link to the relevant content.\nBacked When the idea of creating such a website came to me, I decided to build my own little CMS with node.","title":"Wordpress Website, But Without PHP"},{"content":"When it comes to the decentralized web, decentralization has always been a source of contention. Some believe that the decentralized web is truly decentralized, while others believe that it is unrealistic. To be honest, I believe in second thoughts as well. One of the primary reasons for this is that decentralized web infrastructure continues to rely heavily on centralized infrastructure. Many DAPPs are still hosted on servers provided by major cloud providers such as Amazon and Google, as I mentioned in my previous article.\nI saw HIP 68 recommended on Helium\u0026rsquo;s Github a while ago, and it inspired me to write this article. There was a section in HIP 68 that suggested running the Meson Network CDN nodes on Helium hotspots. I\u0026rsquo;ll explain why, this is a very sound idea.\nNote 1: All opinions expressed in this article are my personal opinions. I\u0026rsquo;d like to state right away that this article is also about missing pieces of some Web3 projects. But that doesn\u0026rsquo;t mean I don\u0026rsquo;t like them. I support and appreciate every project working to decentralize the internet. I believe they will overcome the issues mentioned here.\nLet\u0026rsquo;s get started.\nWhy Helium? Why does integrating Meson into the Helium network make more sense when there are such good and decentralized server/node infrastructure examples like Akash and Flux available today?\nThe two biggest players in the decentralized cloud industry are Akash and Flux. They\u0026rsquo;re doing an excellent job of developing the decentralized clouds. However, there are some parts that I believe are missing. They have a long way to go in terms of distribution, despite how good they are at decentralization.\nThere are three basic types of providers in Akash and Flux.\nData centers As their names indicate, data centers that provide the basic processing power are not much different from the data centers we are accustomed to.\nSecondary market vendors Secondary market vendors are users who sell computing power from major central cloud providers such as AWS, GCP, and Hetzner on Akash and Flux. While the processing power still comes from large central data centers, it is more decentralized as it is provided by a large number of users.\nHome providers It is the rarest but most valuable type of user. Home users contribute to the network with the servers they host in their own homes and play a major role in the decentralization of the network.\nThe first two types of providers provide the majority of the processing power in decentralized clouds. As far as I can see, Akash is currently working to increase home providers. One of these works was the Akash Supermini device. The Supermini can be thought of as a home server. This was a great idea, but unfortunately it\u0026rsquo;s been postponed for now.\nFurthermore, these two decentralized cloud providers can only run Docker containers and do not offer IPv4 or IPv6 addresses.\nWhat makes Helium unique? Helium is inherently distributed. It\u0026rsquo;s not a good idea to put together and run a bunch of helium hotspot miners in one room. Each Helium hotspot must be at least 300 feet apart from the others. This ensures complete dispersion. As a result, the Helium Network has the potential to create sub-networks that operate in highly distributed networks.\nWhat types of sub-networks are possible? VPN, CDN, ping server and other sub-networks that require less processing power can be created. For the rest of this article, I\u0026rsquo;ll go over the Meson CDN example. Meson CDN is a promising project that aims to build a decentralized CDN for Web 3.0.\nWhat are the advantages of running the Meson CDN on Helium nodes for the Helium network? 1. It has the potential to reduce the number of offline hotspots in the Helium network. At the moment, 35% of the Helium network\u0026rsquo;s total hotspots are offline, and this figure is increasing by the day. Low hotspot earnings are one of the main reasons for such a high offline hotspot rate. Some hotspots\u0026rsquo; earnings no longer motivate people to operate them. One of the most significant benefits of Meson Network is that it will strengthen the revenue model for Helium hotspot owners. People who run Meson CDN on their hotspots will be able to earn extra HNT. Furthermore, Meson CDN will increase overall data credit utilization in the helium network. This will help in keeping more hotspots online. On the other hand, Meson CDN nodes consume very few resources on the host machine, which means they can run on any hotspot.\n2. Meson can improve the performance of the 5G network. Helium strives to become one of the biggest players in the global 5G market. At the time of writing this article, there are 2644 5G hotspots connected to the network, and it continues to increase every day.\nIf Meson CDN nodes are installed in these hotspots, users connecting to the internet using Helium 5G can achieve faster web performance than 5G provided by other traditional mobile providers. Of course, this performance increase will be valid for websites where Meson CDN is used, but considering that Meson has the potential to become one of the largest CDNs in the world, this is not a big problem.\nHow it will improve the performance of the 5G network? Hotspots/modems are the first points of contact between the user and the destination server. Furthermore, these are the closest possible points to install CDN servers. Traditional CDN providers are unable to easily install CDN servers at these points. If Helium and Meson collaborate to accomplish this, it may start a new era in the CDN and 5G industries.\nServer-side caching Traditional CDNs Meson + Helium 5G Costs Server load Latency Server-side High High High Traditional CDNs Low Low Median Meson + Helium 5G Low Low Low In this day and age, using server-side caching is something I think you should only use if you\u0026rsquo;re also high. I know, your latest and greatest WordPress server-side caching plugin functions like a magic. Hovever, this method has repeatedly been shown to be ineffective when subjected to high loads. You\u0026rsquo;ll need an offsite cache solution.\n3. In 5G hotspots, it economizes bandwidth coming from outside to the hotspot. When a user connects to the internet via Helium 5G hotspot and logs into a website that uses Meson CDN, if the hotspot is running a Meson CDN node, the hotspot can use its own local cache instead of requesting data from another server each time. In this way, that hotspot can save the internet bandwidth it spends requesting data from servers around the world\nI have covered the three most important topics above. Of course, there are other topics to consider. The most important of these is interoperability. Instead of each project working separately, if they collaborate and develop compatible software with each other, they can accelerate web3 adoption and provide a better environment for developers and users. Only by considering the web 3.0 as a whole can we produce something useful. Despite the fact that we all work on different projects and follow different paths, our ultimate goal is the same. A better Internet for a brighter future. If you have something to say or discuss about it, you can write it under this Twitter post. I\u0026rsquo;m curious about your thoughts too. I have not activated the comment feature here. Let\u0026rsquo;s run like this for a while)\n","permalink":"https://ntmv.net/posts/can-open-service-subdaos-bring-back-heliums-glory-days/","summary":"When it comes to the decentralized web, decentralization has always been a source of contention. Some believe that the decentralized web is truly decentralized, while others believe that it is unrealistic. To be honest, I believe in second thoughts as well. One of the primary reasons for this is that decentralized web infrastructure continues to rely heavily on centralized infrastructure. Many DAPPs are still hosted on servers provided by major cloud providers such as Amazon and Google, as I mentioned in my previous article.","title":"Can Open Service Subdaos Bring Back Helium's Glory Days?"},{"content":" Fingerprint: 9893AB87CA2B7DF582D0F6B08CD527E95DF52A1E\nDownload URL: ntmv.gpg\ncurl -sL https://ntmv.net/keys/ntmv.gpg | gpg --import Make sure all emails from me have my digital signature on them\n","permalink":"https://ntmv.net/contact/","summary":"Fingerprint: 9893AB87CA2B7DF582D0F6B08CD527E95DF52A1E\nDownload URL: ntmv.gpg\ncurl -sL https://ntmv.net/keys/ntmv.gpg | gpg --import Make sure all emails from me have my digital signature on them","title":"Contact"},{"content":"I believe people should be able to find educational materials easily, share them freely with others, and reuse them as needed, without any paywalls or barriers. The content you read on this website is either my original writing or derived from my personal notes that I take while working or learning. All of my writing and posts on this blog are publicly accessible. You can freely use my articles for any good purpose under the CC BY-ND 4.0 license. ","permalink":"https://ntmv.net/license/","summary":"I believe people should be able to find educational materials easily, share them freely with others, and reuse them as needed, without any paywalls or barriers. The content you read on this website is either my original writing or derived from my personal notes that I take while working or learning. All of my writing and posts on this blog are publicly accessible. You can freely use my articles for any good purpose under the CC BY-ND 4.","title":"License"},{"content":"The Web is going to be decentralized. Must be. Wait, what do we need to achieve a fully decentralized future? Of course, decentralized computing and edge infrastructure. When we\u0026rsquo;re talking about Web3, there is always a silent moment for backend infrastructures. Most dapps, swaps, and even nft marketplace websites are running on big corporation-owned centralized datacenters like AWS, Google, and Azure/Microsoft. Meson is a blockchain project working to fill part of that gap. Meson is a decentralized CDN run by people for people. It already has 30k+ edge nodes worldwide so far. I\u0026rsquo;m also running over 108 Meson 3.0 servers/nodes in 17 counties and 27 different cities worldwide.\nMy total effective bandwidth is ~71 Gbps. It\u0026rsquo;s inspiring to be a part of this amazing network. My next article will be about installing nodes for Meson Network and my experiences as a node runner. Wait for it.\nMeson Network has two different CDNs. Meson 3.0 and m-cdn. M-cdn is a hybrid multi-cdn that uses a lot of third-party CDN services. Meson 3.0 is what I was looking for. It is a truly decentralized CDN with 30K nodes globally. So I decided to do some tests with it.\nFirst of all, I\u0026rsquo;ve spun up a VM with an NGINX server. Later, I created a simple web page by forking this codepen repo. Uploaded to server. Now we have a running website. Let\u0026rsquo;s connect it to Meson.\nStarting with Meson 3.0 Meson\u0026rsquo;s dashboard has a user-friendly and easy-to-understand UI. First, go to your DNS provider\u0026rsquo;s dashboard, and create an A-record that points to your web server. Later, open dashboard.meson.network, create an account, \u0026gt; pull zones, \u0026gt; create pull zone.\nEnter your domain name without https. You can start using Meson for free. There is a $5 credit for new users. Give it a try. My testing and comparisons First, I\u0026rsquo;ve tried to connect my website directly to see what the end point is. Cdn redirected me to a URL. I found an IP in my country after pinging that URL\u0026rsquo;s sub-domain. Then I noticed that the IP belongs to one of my servers, which I\u0026rsquo;m running for the Meson network. That was a fascinating moment. Then I also connected to another node\u0026rsquo;s IP, which is run by my close friend. It\u0026rsquo;s amazing.\nTest 2: Coverage I\u0026rsquo;ve spun up 9 VMs in 7 different cities and sent a get request to https://pz-dzulrd.meson.network to see where I will be redirected. Results👇 Paris 🇫🇷 (a1) - Paris 🇫🇷 (51.178.161.211) Seul 🇰🇷 (a10) - Seul 🇰🇷 (20.41.117.166) Sydney 🇦🇺 (a11) - Sydney 🇦🇺 (20.211.98.179) Hong Kong 🇭🇰 (a12) - Hong Kong 🇭🇰 (20.187.102.213) Hong Kong 2 🇭🇰 (a14) - Hong Kong 🇭🇰 (20.187.147. 38) Hong Kong 3 🇭🇰 (a16) - Hong Kong 🇭🇰 (20.187.147.38) Oslo 🇳🇴 (a13) - Oslo 🇳🇴 (51.13.112.214) Chennai 🇮🇳 (a15) - Pune 🇮🇳 (20.219.147.47) Virginia 🇺🇸 (a17) - Montreal 🇨🇦 (51.222.210.164) Test 3: Gtmetrix one-to-one comparison I ran this test on two identical copies of this page. One copy is running on my single VPS, the other one is served by Meson Network. The results say everything. Meson is the clear winner.\nReport link\nThere is only one red column, and it\u0026rsquo;s because of redirecting. I will explain how this problem can be solved with anycast shortly. As you saw, I didn\u0026rsquo;t compare Meson with other CDN providers like Cloudflare, Bunnycdn, and Cloudfront because I don\u0026rsquo;t think it\u0026rsquo;s fair to compare them yet. However, I will when the time comes. At the end of the day, it works well.\nStability I did not encounter any performance issues during the period I tested. There were a few connection drops for some specific locations, for example, Hong Kong and Shenzen, but generally, I can say that Meson has reliable service. Pricing The pricing is really simple. $0.01/Gb.\nIt\u0026rsquo;s cheap compared to other alternatives. However, I think it will be a little cheaper in the future. What I think is missing in this project I think they must build their own anycast network asap.\nAnycast is a network addressing and routing methodology in which a single destination IP address is shared by devices in multiple locations. The nearest device responds to requests, giving end users access to fast service without the high latency issues that can be caused by traditional geo-location solutions. This reduces latency as well as packet loss rates because data can travel on routes that are optimized for speed and not just the shortest distance. Meson 3.0 current architecture Anycast example (google.com architecture) Anycast network will increase the CDN performance tremendously. They are currently using a single VM to share the network traffic. That VM might be powerful and well-located, but it\u0026rsquo;s still a single point of failure. That\u0026rsquo;s why I think anycast is so important in the future of Meson. Future Nobody knows what will happen in the future. But I think Meson Network can be the next Airbnb for the CDN industry. Fun fact: This website is also powered by Meson and Akash.\n..Akash? Yes, my next post will be about it :)\n","permalink":"https://ntmv.net/posts/my-thoughts-and-experiences-on-meson-decentralized-cdn-network/","summary":"The Web is going to be decentralized. Must be. Wait, what do we need to achieve a fully decentralized future? Of course, decentralized computing and edge infrastructure. When we\u0026rsquo;re talking about Web3, there is always a silent moment for backend infrastructures. Most dapps, swaps, and even nft marketplace websites are running on big corporation-owned centralized datacenters like AWS, Google, and Azure/Microsoft. Meson is a blockchain project working to fill part of that gap.","title":"My Thoughts and Experiences On Meson - Decentralized CDN Network"}]